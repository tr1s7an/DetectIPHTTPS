#!/usr/bin/env python

import requests
import re
import ipaddress
import concurrent.futures


class DetectIPHTTPS:

    def __init__(self) -> None:
        self.headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:96.0) Gecko/20100101 Firefox/96.0"}
        self.ipset = "202.81.%d.%d"
        self.results_file = "results"
        self.max_threads = 8
        self.max_processes = 8

    def start_detect(self, i: int) -> list:
        results = []
        with concurrent.futures.ThreadPoolExecutor(max_workers=self.max_threads) as executor:
            future_to_url = {executor.submit(self.detect, i, j, requests.Session()): j for j in range(0, 256)}
            for future in concurrent.futures.as_completed(future_to_url):
                result = future.result()
                if len(result) > 1:
                    results.append(result)
        return results

    def detect(self, i: int, j: int, S: requests.Session) -> list:
        this_ip = self.ipset % (i, j)
        try:
            req = S.get("https://" + this_ip, headers=self.headers, timeout=2)
        except Exception as e:
            error = str(e)
            if "match" in error:
                name = re.findall("[^t]\s\'(.+?)\'", error)
                return name
        return []

    def write_to_file(self, results_dict: dict) -> None:
        sorted_keys = sorted(results_dict.keys(), key=ipaddress.IPv4Address)
        with open(self.results_file, "w") as f:
            f.write("=====Generated by Github Actions=====\n")
            for key in sorted_keys:
                f.write(key)
                f.write(" ")
                f.write(results_dict[key])
                f.write("\n")

    def start(self) -> None:
        results = []
        results_dict = {}
        with concurrent.futures.ProcessPoolExecutor(max_workers=self.max_processes) as executor:
            for results in executor.map(self.start_detect, range(224, 256)):
                for result in results:
                    results_dict[result[0]] = ' '.join(result[1:])
        self.write_to_file(results_dict)


if __name__ == "__main__":
    mydetect = DetectIPHTTPS()
    mydetect.start()
